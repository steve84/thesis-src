# -*- coding: utf-8 -*-


from ebaysdk.finding import Connection as Finding
from ebaysdk.exception import ConnectionError
import json, csv, unicodedata

def createCsvFile(file_name, resultList):
    with open(file_name, 'wb') as test_file:
        file_writer = csv.writer(test_file, csv.excel, quoting=csv.QUOTE_ALL)
        file_writer.writerow(['Ground truth number','Category'])
        count = 1
        for result in resultList:
            if len(result) == 1:
                file_writer.writerow([str(count), str(result[0])])
                count += 1
            
def trimTitle(title, length):
    for x in range(0,length):
        pos = title.rfind(' ')
        title = title[:pos]
        
    return title
    
def loadInputs(csv_file_name):
    with open(csv_file_name, 'rb') as csv_file:
        inputs = list()
        file_reader = csv.reader(csv_file, csv.excel)
        file_reader.next()
        for row in file_reader:
            input = str(row[1])
            input = input.replace('&','&amp;')
            inputs.append(input)
        return inputs 

# load the titles generated by the crowd        
titles = loadInputs('input_title.csv')        

titleCat = list() 
 
try:
    for title in titles:
				# count the number of words
        nbrOfWords = len(title.split(' '))
        
        for x in range(0, (nbrOfWords - 1)):
            api = Finding(appid='INSERT_APP_ID')
            api.execute('findCompletedItems', {
                    'keywords': trimTitle(title, x),
                    'outputSelector': 'CategoryHistogram',
                    })
            
            response = json.loads(api.response_json())
    
            categories = list()
            
						# check if the API found a category
            if 'categoryHistogramContainer' in response.keys():
                if 'categoryHistogram' in response['categoryHistogramContainer'].keys():
										# extract the category with the most hits
                    hist = response['categoryHistogramContainer']['categoryHistogram']
                    if (len(hist) == 4) & (not isinstance(hist, list)):
                        categories.append(unicodedata.normalize('NFKD', hist['categoryName']['value']).encode('ascii','ignore'))
                        break
                    for category in hist:
                        categories.append(unicodedata.normalize('NFKD', category['categoryName']['value']).encode('ascii','ignore'))
                        if len(categories) == 1:
                            break
                        
            if len(categories) == 0:
                categories.append('')
                        
        titleCat.append(categories)
		# write the results into a csv file
    createCsvFile('output_categories.csv', titleCat)
        
except ConnectionError as e:
    raise e   